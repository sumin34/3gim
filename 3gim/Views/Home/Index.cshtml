@model IEnumerable<_3gim.Models.Temperature>
<script src="/js/echarts.js"></script>

<main>
    <div class="container-fluid px-5">
        <h1 class="mt-5">Main</h1>

        <div class="row">
            <div class="col-xl-4 col-md-6">
                <div class="card bg-dark text-white mb-4">
                    <div style="text-align:center" class="card-header">양품 갯수</div>
                    <div style="text-align:center" class="card-body"><p id="Supplies">0</p></div>
                </div>
            </div>
            <div class="col-xl-4 col-md-6">
                <div class="card bg-dark text-white mb-4">
                    <div style="text-align:center" class="card-header">불량품 갯수</div>
                    <div style="text-align:center" class="card-body"><p id="Defects">0</p></div>
                </div>
            </div>
            <div class="col-xl-4 col-md-6">
                <div class="card bg-dark text-white mb-4">
                    <div style="text-align:center" class="card-header">실시간 온도</div>
                    <div style="text-align:center" class="card-body"><p id="temperature">0˚C</p></div>
            </div>
        </div>

        <div class="container row" style="float: none; margin: auto;">
            <div class="col-xl-15" style="float: none; margin:0 auto">
                    <div class="card mb-4">

                        <div class="card-header">
                            <i class="fas fa-table me-1"></i>
                            Temperature
                        </div>
                        <div class="card-body">
                            <div id="tempchart" style="align-content:center; width:100%;height:400px;"></div>
                        </div>
                    </div>

                <div class="card mb-4">

                    <div class="card-header">
                        <i class="fas fa-table me-1"></i>
                        진행상황(CPS


                    </div>
                    <div class="card-body">
                            <img src="belt.gif" />
                            <img src="stop1.png" />
                            <img src="stop1.png" />

                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script src="/js/echarts.js"></script>

    <script>
    var myChart = echarts.init(document.getElementById('tempchart'));

    window.onresize = myChart.resize;

    var modelList = @Html.Raw(Json.Serialize(Model)); // 리스트 객체를 JSON 문자열로 직렬화


    //chart의 설정을 정합니다.
    var option = {
        title: {
            text: '온도 기록',
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'cross',
                label: {
                    backgroundColor: '#283b56'
                }
            }
        },
        
        legend: {
            data: ['온도']
        },
        dataZoom: {
            show: false,
            start: 0,
            end: 100
        },
        xAxis: [
            {
                type: 'category',
                boundaryGap: true,
                data: (function () {
                    //var now = new Date();
                    var res = [];
                    var len = 10;
                    //while (len--) {
                    //    res.unshift(now.toLocaleTimeString().replace(/^\D*/, ''));
                    //    now = new Date(now - 2000);
                    //}

                    for (var i = 0; i < modelList.length; i++) {
                        var model = modelList[i];
                        res.unshift(model["time"])
                    }

                    return res;
                })()
            },
        ],
        yAxis: [
            {
                type: 'value',
                scale: true,
                name: '',
                max: 40,
                min: 10,
                boundaryGap: [0.2, 0.2],
                axisLabel: {
                    formatter: '{value} ˚C'
                },
            },
        ],
        series: [
            {
                name: '온도',
                type: 'line',
                lineStyle: {
                    color: '#2A265C' //line차트 색상 변경
                },
                smooth: true, //부드러운 line 표현
                yAxisIndex: 0, //yAxis 1번째 사용
                data: (function () {
                    var res = [];
                    var len = 0;

                    //while (len<10) {
                    //    res.push(5);
                    //    len++;
                    //}

                    // 리스트 순회
                    for (var i = 0; i < modelList.length; i++) {
                        var model = modelList[i];
                        res.unshift(model["temp"])
                    }

                    return res;
                })()
            },
        ]
    };

    // 위에서 설정한 속성을 차트에 반영합니다.
    myChart.setOption(option);

    //데이터를 생성하고 삭제합니다.
    setInterval(function () {
        //x축에 실시간 데이터 생성
        var axisData = (new Date()).toLocaleTimeString().replace(/^\D*/, '');

        var data0 = option.series[0].data; //순수익 데이터


        //데이터의 가장 왼쪽 값을 제거
        data0.shift();
        //데이터의 가장 오른쪽 값을 추가
        //data0.push(28.7);
        data0.push(test);


        //x축에 시간 데이터 추가
        option.xAxis[0].data.shift();
        option.xAxis[0].data.push(axisData);

        //차트에 반영
        myChart.setOption(option);
    }, 2100);


    var connection = new signalR.HubConnectionBuilder().withUrl("/TempHub").build();
    var test;
    connection.on("ReceiveTemp", function (temp) {
        document.getElementById("temperature").innerHTML = temp + "˚C";
        test = temp;
    });


    connection.start().then(function () {
        console.log("연결 성공");
    }).catch(function (err) {
        console.log("연결 실패 : " + err.toString());
    });

    function Suppliescount() {
        // 서버로부터 숫자 값을 요청
        fetch('/product/Supplies') // 서버의 엔드포인트 URL로 수정해야 함
            .then(response => response.text())
            .then(data => {
                document.getElementById('Supplies').textContent = data;
            })
            .catch(error => {
                console.error('Failed to fetch number', error);
            });

        // 일정 시간 후에 다시 함수 호출 (1초 후)
        setTimeout(Suppliescount, 1000); // 1초마다 숫자값 표시를 업데이트
    }

    function Defectscount() {
        // 서버로부터 숫자 값을 요청
        fetch('/product/Defects') // 서버의 엔드포인트 URL로 수정해야 함
            .then(response => response.text())
            .then(data => {
                document.getElementById('Defects').textContent = data;
            })
            .catch(error => {
                console.error('Failed to fetch number', error);
            });

        // 일정 시간 후에 다시 함수 호출 (1초 후)
        setTimeout(Defectscount, 1000); // 1초마다 숫자값 표시를 업데이트
    }

    Suppliescount();
    Defectscount();


</script>

